#include <iostream>
#include <bitset>
#include <cstdlib>
#include "OlsApi.h"
#include "OlsDef.h"
#define READING_VALID 0x80000000
#define RES_CELSIUS 0x78000000
#define DIG_READOUT 0x7F0000

bool bStillBusy = false;

DWORD eax, edx;
DWORD maxTemp, curTemp;

void CALLBACK TimerProc(HWND, UINT, UINT, DWORD);

int main()
{
    UINT id;
    MSG msg;

    bStillBusy = true;

    if (InitializeOls())
    {
        std::cout << "Ols Initialized" << std::endl;
    }

    if (GetDllStatus() == OLS_DLL_NO_ERROR)
    {
        std::cout << "Dll Status OK" << std::endl;
    }

    if (IsMsr())
    {
        std::cout << "MSR commands supported." << std::endl;
        Rdmsr(0x1A2, &eax, &edx);
        maxTemp = ((eax & 0xFF0000) >> 16);

    }

    id = SetTimer(NULL, 0, 1000, (TIMERPROC)TimerProc);

    while (bStillBusy)
    {
        GetMessage(&msg, NULL, 0, 0);
        DispatchMessage(&msg);
    }

    KillTimer(NULL, id);

    return 0;
}

void CALLBACK TimerProc(HWND hwnd, UINT uMsg, UINT idEvent, DWORD dwTime)
{
    
    Rdmsr(0x19C, &eax, &edx);
    curTemp = maxTemp - ((eax & DIG_READOUT) >> 16);
    // std::cout << std::bitset<sizeof(DWORD)*8>(eax) << std::endl;
    // std::cout << ((eax & READING_VALID) >> 31) << std::endl;
    // std::cout << ((eax & RES_CELSIUS) >> 27) << std::endl;
    std::cout << "  \b\b";
    std::cout << curTemp;
    std::cout << "\b\b";
    bStillBusy = true;
}

// int main()
// {
//     if (InitializeOls())
//     {
//         std::cout << "Ols Initialized" << std::endl;
//     }

//     if (GetDllStatus() == OLS_DLL_NO_ERROR)
//     {
//         std::cout << "Dll Status OK" << std::endl;
//     }

//     if (IsMsr())
//     {
//         DWORD eax, edx;
//             Rdmsr(0x19C, &eax, &edx);
//             // std::cout << std::bitset<sizeof(DWORD)*8>(eax) << std::endl;
//             // std::cout << ((eax & READING_VALID) >> 31) << std::endl;
//             // std::cout << ((eax & RES_CELSIUS) >> 27) << std::endl;
//             std::cout << "  \b\b";
//             std::cout << ((eax & DIG_READOUT) >> 16);
//             std::cout << "\b\b";
//     }
//     system("pause");
// }